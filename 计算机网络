		目录
	• 计算机网络和互联网
	• 应用层
	• 传输层
	• 网络层：数据平面
	• 网络层：控制平面
	• 数据链路层和局域网
	• 网络安全
	• 无线和移动网络
	• 多媒体网络
	• 网络管理

计算机网络和互联网
5层因特网协议栈 7层OSI参考模型
应用层 （表示层 会话层） 运输层 网络层 链路层 物理层
（1）应用层
	功能：应用层是网络应用程序及他们的应用层协议存留的地方。
	包含的协议如HTTP、SMTP、FTP、DNS等
		○ 其中HTTP提供WEB文档的请求和传送
		○ SMTP提供了电子邮件报文的传输
		○ FTP提供两个端系统之间的文件传送
		○ DNS为域名系统，提供了域名解析为32位的网络地址
	位于应用层的信息分组成为报文（message）。
（2）运输层
	功能：运输层在应用程序端点之间传送应用层报文。
	包含的协议为TCP和UDP。
	TCP向它的应用程序提供面向连接的服务，确保传递和流量控制，提供拥塞控制机制。
	UDP向它的应用程序提供无连接服务，没有可靠性，没有流量控制，没有拥塞控制。
	运输层的信息分组称为报文段（segment）。
（3）网络层
	功能：负责将网络层分组从一台主机移动到另一台主机。
	包含的协议为网际协议IP，也称为IP层。
	位于网络层的分组称为数据报（datagram）。
（4）链路层
	功能：将分组从一个节点（主机或路由器）移动到路径的下一个节点。
	链路层提供的服务取决于特定链路层协议。
	链路层例子包括以太网、WIFI和电缆接入网的DOCSIS协议
	位于链路层分组称为帧（frame）。
（5）物理层
	功能：将帧中的一个个比特从一个节点移动到下一个节点。
	该层协议与链路相关，如双绞铜线、同轴电缆、光纤等

TIPS：
表示层：
功能：使通信的应用程序能够解释交换数据的含义
包括数据压缩和数据加密以及数据描述。
会话层：
功能：提供了数据交换的定界和同步功能
包括了建立检查点和恢复方案的方法。

应用层
应用程序网络开发主流体系结构：客户-服务器（C/S client）体系结构，对等(P2P)体系结构

HTTP协议
非持续连接和持续连接：非持续连接用多个TCP连接，持续连接用相同的TCP连接。
HTTP报文格式：
			
请求方式:
（1）GET方法意思是获取URL指定的资源，这个请求方式是最简单的也是最常用的。使用GET 方法时，可以将请求参数和对应的值附加在 URI 后面，利用一个问号(“?”)将资源的URI和请求参数隔开，参数之间使用与符号(“&”)隔开，因此传递参数长度也受到了限制，而且与隐私相关的信息也直接暴露在URI中。比如/index.jsp?username=holmofy&password=123123
（2）HEAD 方法与GET用法相同，但没有响应体，使用场合没有GET多。比如下载前使用HEAD发送请求，通过ContentLength响应字段，来了解网络资源的大小；或者通过LastModified响应字段来判断本地缓存资源是否要更新。
（3）POST 方法一般用提交信息或数据，请求服务器进行处理（例如提交表单或者上传文件）。表单使用POST相对GET来说还是比较隐秘的，而且GET的URL有长度限制，而上传大文件就必须要使用POST了。
（4）OPTIONS方法比较少见，该方法用于请求服务器告知其支持哪些其他的功能和方法。通过OPTIONS 方法，可以询问服务器具体支持哪些方法，或者服务器会使用什么样的方法来处理一些特殊资源。可以说这是一个探测性的方法，客户端通过该方法可以在不访问服务器上实际资源的情况下就知道处理该资源的最优方式。这个选项在跨域HTTP请求的情况出现的比较多，这里有一片关于跨域请求的文章，其中有一张图很好的解释了什么是跨域HTTP请求。
（5）PUT：用于向指定资源位置上传其最新内容(原来没有就上传，有就上传并覆盖原来的内容)
（6）DELETE：请求服务器删除Request-URI所标识的资源。
（7）TRACE：回显服务器收到的请求，主要用于测试或诊断。比较少见。
（8）CONNECT：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的HTTP代理服务器）。
其中GET和POST是最常用的，其次是HEAD和OPTIONS；像PUT和DELETE属于危险方法，服务器都会关闭；TRACE和CONNECT非常少见

常见HTTP响应码： 
200：客户端请求成功。
302：重定向。
404：请求资源不存在。
400：请求语法错误，服务器无法理解。
403：服务器收到请求，但拒绝提供服务。
500：服务器内部错误。
503：服务器当前不能处理客户端请求，可能需要一段时间后才能恢复正常。
常见请求头：
1.Host: 指定强求资源的主机名和端口号
2.User-Agent：用户请求的代理软件
3.Referer：代表访问的上一个URL
4.Cookie：表示请求者身份
5.Range：多线程下载会用到的请求头
6.Accept：客户端接收什么类型的信息
7.Accept-Charset：接收什么字符集，如UTF-8 GBK等
8.Accept-Language：接收什么语言
9.Accept-Encoding：接收什么压缩格式的内容


DNS：域名系统
功能：提供主机名到IP的转换

0-1023为常用端口号，不能用于开发
1024-65535为我们该用的端口号
网络常用端口号：
21/tcp FTP 文件传输协议
22/tcp SSH 安全登录、文件传送(SCP)和端口重定向
23/tcp Telnet 不安全的文本传送
25/tcp SMTP Simple Mail Transfer Protocol (E-mail)
69/udp TFTP Trivial File Transfer Protocol
79/tcp finger Finger
80/tcp HTTP 超文本传送协议 (WWW)
88/tcp Kerberos Authenticating agent
110/tcp POP3 Post Office Protocol (E-mail)
113/tcp  这是一个许多计算机上运行的协议，用于鉴别TCP连接的用户。使用标准的这种服务可以获得许多计算机的信息。但是它可作为许多服务的记录器，尤其是FTP、POP、IMAP、SMTP和IRC等服务。通常如果有许多客户通过防火墙访问这些服务，将会看到许多这个端口的连接请求。记住，如果阻断这个端口客户端会感觉到在防火墙另一边与E-MAIL服务器的缓慢连接。许多防火墙支持TCP连接的阻断过程中发回RST。这将会停止缓慢的连接。
119/tcp NNTP NEWS新闻组传输协议，承载USENET通信。这个端口的连接通常是人们在寻找USENET服务器。多数ISP限制，只有他们的客户才能访问他们的新闻组服务器。打开新闻组服务器将允许发/读任何人的帖子，访问被限制的新闻组服务器，匿名发帖或发送SPAM。
220/tcp IMAP3
443/tcp HTTPS 网页浏览端口，能提供加密和通过安全端口传输的另一种HTTP。



POST /index.html HTTP/1.1 HOST: www.XXX.com User-Agent: Mozilla/5.0(Windows NT 6.1;rv:15.0) Firefox/15.0 Username=admin&password=admin

HTTP/1.1 200 OK 
Content-Encoding: gzip 
Content-Type: text/html;charset=utf-8 
<!DOCTYPE html> 
<html lang="en"> <head> <meta charset="UTF-8" /> <title>Document</title> </head> <body> <p>this is http response</p> </body> </html>

常见响应头：
1.Server:服务器所用的WEB服务器名称
2.Set-Cookie：向客户端设置cookie。与cookie请求头相互对应
3.Last-Modified：
服务器通过该头信息告诉浏览器，资源最后的修改时间。从而让客户端及时地更新缓存内容
4.Location：
服务器通过该头信息告诉浏览器去访问那个页面，浏览器接收到这样的响应信息后，通常会立刻访问Location头所指向的页面。这个头通常配合302重定向状态码使用。
5.Refresh：让浏览器定时刷新
6.Cache-Control：指定客户端对页面的缓存策略

运输层：

运输层和网络层的关系
• 运输层（TCP或UDP）为运行在不同主机上的进程之间提供逻辑通信
• 网络层（IP协议）提供了主机之间的逻辑通信
IP协议的服务模型
尽最大努力交付服务。但它并不做任何确保：
1、 不确保报文段的交付
2、 不确保报文段的按序交付
3、 不确保报文段中数据的完整性
所以IP被称为不可靠服务。
UDP和TCP协议的服务模型
将两个端系统间IP的交付服务扩展为运行在端系统上的两个进程之间的交付服务。这种服务被称为运输层的多路复用与多路分解。

• 多路分解：将运输层报文段中的数据交付到正确的套接字的工作
• 多路复用：在源主机从不同套接字中收集数据块，并为每个数据块封装上首部信息（用于在以后分解）从而生成报文段，然后将报文段传递到网络层的工作

UDP是一种不可靠服务，不能保证一个进程所发送的数据能够完成无缺。
TCP提供了几种附加服务：
	1、提供可靠数据传输。通过使用流量控制、序号、确认和定时器来确保
	2、提供拥塞控制

端口号是套接字的标识符
UDP套接字由一个二元组来全面标识，包含目的IP和目的端口号。因此两个不同源的UDP报文段会通过相同的套接字定向到相同的进程。
TCP套接字由一个四元组来标识，包含源IP地址，源端口号，目的IP地址，目的端口号。特别与UDP不同的是，具有不同源IP地址或源端口号，但具有相同目的IP地址或目的端口号的两个到达TCP报文段将被定向到两个不同的套接字；除非TCP报文段携带了初始创建连接的请求。

选择UDP的原因
1、 关于何时、发送什么数据的应用层控制更为精细
2、无需连接建立
3、无连接状态
4、分组首部开销小

滑动窗口协议（回退N步协议/GBN）
这个协议中，发送方分组被分成四个类型
1、已发送并已被确认的分组
2、已发送但还未确认的分组
3、可用，但还未发送的分组
4、不可用的分组。
其中第二种和第三种分组在滑动窗口内。
回退N步发送方必须响应的三种类型的事件
1、上层的调用
2、收到一个ACK
3、超时事件
回退N步会造成单个分组出错就引起重传大量分组的问题，但许多分组其实没有必要重传，所以可以使用“选择重传”。

选择重传（SR）
这个协议中，发送方分组也是上面的四个类型，不同的是第一种分组（已发送并已被确认的分组）也会出现在滑动窗口内。
接收方的滑动窗口也有三种类型的分组
1、失序（已缓存），但未被确认的分组
2、可接受的分组
3、期待，还未收到的分组

可靠数据传输机制及其用途总结
机制	用途和说明
检验和	用于检测在一个传输分组中的比特错误
定时器	用于超时/重传一个分组，可能因为该分组（或其ACK）在信道中丢失了。由于分组延时但未丢失，或者接收方返回的ACK丢失时，可能产生超时事件，所以接受方可能受到同一分组的冗余副本
序号	用于从发送方到接收方的数据分组按顺序编号，可检测出丢失的分组和同编号的冗余副本。
确认	接受方告诉发送方正确接受了。确认报文通常携带被确认的分组或多个分组的序号
否定确认	接收方告诉发送方未正确接受。包含未被正确接受的分组序号
窗口、流水线	发送方被限制仅发送序号落在窗口内的分组。窗口大小可根据接收方接受和缓存报文的能力、网络拥塞程度来进行设置。

TCP
TCP为点对点连接，不存在多播，即一个发送方将数据传送给多个接收方，对TCP来说是不可能的。

TCP的“三次握手”中，前两次的报文段不承载“有效载荷”，也就是不包含应用层数据，第三次报文段可以承载有效载荷。

TCP连接的组成包括：一台主机上的缓存、变量和与进程连接的套接字，以及另一台主机上的另一组缓存、变量和与进程连接的套接字。在这两台主机之间的网络元素（路由器、交换机和中继器）中，没有为该连接分配任何缓存和变量。

TCP报文段结构
• 源端口号和目的端口号：用于多路复用/分解
• 序号和确认号：被TCP发送方和接收方用来实现可靠数据传输服务
• 接收窗口：用于流量控制。指示接收方愿意接受的字节数量。
• 首部长度：由于TCP选项字段，TCP首部的长度是可变的。（通常，选项字段为空，所以TCP首部的典型长度就是20字节）
• 选项：用于发送方和接收方协商最大报文段长度(MSS)时，或在高速网络环境下用作窗口调节因子时使用
• 6比特的标志字段：ACK(成功接受报文段的确认)、RST-SYN-FIN(用于TCP连接的建立和拆除)、PSH(接收方应立即把数据交给上层)、URG(略)


流量控制
一条TCP连接每一侧主机都为该连接设置了接收缓存。当该TCP连接收到正确、按序的字节后，它就将数据放入接收缓存。
相关联的应用进程会从该缓存中读取数据，但不必是数据刚一到达就立即读取。事实上，接收方应用也许正忙于其他任务，甚至要过很长时间后才去读取该数据。如果某应用程序读取数据时相对缓慢，而发送方发送得太多、太快，发送的数据就会很容易使该连接的接收缓存溢出。
所以TCP为它的应用程序提供了流量控制服务以消除发送方使接收方缓存溢出的可能性。流量控制是一个速度匹配服务，即发送方的发送速率与接收方应用程序的读取速率相匹配。

TCP通过让发送方维护一个称为接收窗口的变量来提供流量控制。通俗地讲，接收窗口用于给发送方一个指示——该接收方还有多少可用的缓存空间。因为TCP是全双工通信，在连接两端的发送方都各自维护一个接收窗口。

SYN洪泛攻击
这种攻击针对的是TCP的“三次握手”。
在正常的三次握手中，服务器为了响应一个收到的SYN，分配并初始化连接变量和缓存。然后服务器发送一个SYN ACK进行响应，并等待来自客户的ACK报文段。如果某客户不发送ACK来完成该三次握手的第三步，最终（通常在一分多钟之后）服务器将终止该半开连接并回收资源。
在SYN洪泛攻击中，攻击者发送大量的TCP SYN报文段，而不完成第三次握手的步骤。随着这种SYN报文段纷至沓来，服务器不断为这些半开连接分配资源（但从未使用），导致服务器的连接资源被消耗殆尽。
有效应对SYN洪泛攻击的防御系统称为SYN cookie。

TCP三次握手——建立连接
第一次握手：请求连接。客户端向服务器发送TCP SYN报文段，其中包含标志位SYN置1，和一个随机选的客户端初始序号client_isn
第二次握手：服务器允许连接。服务端收到TCP SYN报文段，为该TCP连接分配缓存和变量并发送允许连接的报文段。其中包含1、SYN置1。2、首部确认号TCP报文段客户端初始序号client_isn+1。3、服务器初始序号server_isn
第三次握手：客户端允许连接，连接建立。客户端分配缓存和变量。发送报文段SYN置0，TCP报文段首部的确认字段server_isn+1。可以携带报文段负载。


四次挥手——断开连接
第一次挥手：客户端发送结束连接标志位FIN置1
第二次挥手：服务器接收到结束连接，并发送确认报文段ACK
第三次挥手：服务器发送自己的结束连接报文段FIN置1
第四次挥手：客户端收到后，发送确认报文段ACK



TCP拥塞控制
拥塞控制：防止过多的数据注入到网络中，装可以使网络中的路由器或链路不至于过载，拥塞控制自然也是控制发送者的流量，拥塞控制有三种算法：慢启动，拥塞避免，快速恢复
发送方维持一个拥塞窗口cwnd的状态变量，拥塞窗口的大小取决于网络的拥塞程度，并且动态的在变化。发送方让自己的发送窗口等于拥塞窗口和接收窗口的最小值。
1.慢启动。慢启动算法的思路是当主机开始发送数据时，先以比较小的拥塞窗口进行发送，然后再次翻倍，也就是说，由小到大逐渐增加拥塞窗口的大小，而这个增长是指数增长，如1,2,4,8…为了防止拥塞窗口cwnd增长过大引起网络拥塞，还要另外设置一个慢启动阈值ssthresh状态变量，当拥塞窗口大小超过慢启动阈值的时候（cwnd>ssthresh时），停止使用慢启动算法而改用拥塞避免算法。
2.拥塞避免。拥塞避免算法的思路是让拥塞窗口cwnd缓慢地增大，即经过一个往返时间RTT就把发送方的拥塞cwnd+1
3.快速恢复。当超过设定的时间没有收到某个报文段的ack时，表示网络拥塞，慢启动阈值ssth变为原来的一般，拥塞窗口cwnd=1，进入慢启动阶段
